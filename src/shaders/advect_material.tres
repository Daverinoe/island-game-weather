[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

// Based heavily off of a project I found in a reddit post somewhere.
// Quantities are named as they are to be as close to possible to literature
// standard norms.

uniform float dt; // Timestep

uniform sampler2D u; // Input velocity

float bilinearInterpolation(sampler2D vecField, vec2 oldPos, vec2 dxdy){
	// Bring position onto the grid, then move to center of local grid.
	vec2 pos = oldPos / dxdy - 0.5;
	
	// Break position into integer and fractional parts for mixing
	vec2 fraction = fract(pos);
	vec2 integer = floor(pos);
	
	// Find the weighted parts for the four quadrants of the square
	float topLeft = texture(vecField, (integer + vec2(0.5, 0.5)) * dxdy).x;
	float topRight = texture(vecField, (integer + vec2(1.5, 0.5)) * dxdy).x;
	float bottomLeft = texture(vecField, (integer + vec2(0.5, 1.5)) * dxdy).x;
	float bottomRight = texture(vecField, (integer + vec2(1.5, 1.5)) * dxdy).x;
	
	// Mix the parts, weighted by the fractions
	return mix(mix(topLeft, topRight, fraction.x), mix(bottomLeft, bottomRight, fraction.x), fraction.y);
}

void fragment(){
	// Store velocity x in the red component, and velocity y in the green component.
	// Use the \"look backward\" method that nvidia pioneered
	// Rename UV to pos to save my little brain
	
	// Use buffer to prevent weird line artifacts
	vec2 pos = SCREEN_UV;
	vec2 vpos = UV;
	
	// Our \"grid\" are the pixels, but we could change that here to an arbitrary grid size
	vec2 dxdy = SCREEN_PIXEL_SIZE;
	
	vec2 oldPos = vpos - dt * dxdy * (texture(u, vpos).xy);
	float outputDensity = bilinearInterpolation(SCREEN_TEXTURE, oldPos, dxdy);
	
	if (pos.x > 0.49 && pos.x < 0.51 && pos.y > 0.49 && pos.y < 0.51){
		outputDensity = 1.0;
	}
	
	// Apply boundary conditions
	if (pos.x < dxdy.x || pos.x > 1.0 - dxdy.x){
		outputDensity = 0.0;
	}
	if (pos.y < dxdy.y || pos.y > 1.0 - dxdy.y){
		outputDensity = 0.0;
	}
		
	// Return new vector field
	COLOR = vec4(outputDensity, outputDensity, outputDensity, 1.0);
}"
