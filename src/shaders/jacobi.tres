[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D divergence; // Divergence of the intermediate velocity

float samplePressure(vec2 pos, vec2 border, sampler2D div){
	
	// We want the derivative of the pressure at the borders to be 0, so if
	// we are at the border, just copy the adjacent value.
	
	if (pos.x > 1.0 - border.x){
		return texture(div, vec2(pos.x - border.x, pos.y)).x;
		
	} else if (pos.x < border.x){
		return texture(div, vec2(border.x, pos.y)).x;
		
	} else if (pos.y > 1.0 - border.y){
		return texture(div, vec2(pos.x, pos.y - border.y)).x;
		
	} else if (pos.y < border.y){
		return texture(div, vec2(pos.x, border.y)).x;
		
	} else {
		return texture(div, pos).x;
	}
	
}

void fragment(){
	// Constants for the Jacobi calculation (taken from Nvidia paper)
	float alpha = -1.0;
	float rbeta = 0.25;
	
	// Use SCREEN_UV this time because we want to use the buffer.
	vec2 pos = SCREEN_UV;
	
	vec2 dxdy = SCREEN_PIXEL_SIZE;
	
	// Still want to sample over the entire divergence field, so UV here???
	float div = texture(divergence, UV).x;
	float left = samplePressure(vec2(pos.x - dxdy.x, pos.y), dxdy, SCREEN_TEXTURE);
	float right = samplePressure(vec2(pos.x + dxdy.x, pos.y), dxdy, SCREEN_TEXTURE);
	float bottom = samplePressure(vec2(pos.x, pos.y - dxdy.y), dxdy, SCREEN_TEXTURE);
	float top = samplePressure(vec2(pos.x, pos.y + dxdy.y), dxdy, SCREEN_TEXTURE);
	
	// Compute single Jacobi iteration
	float pressureEstimate = (left + right + bottom + top + (alpha * div)) * rbeta;
	
	// Return pressure estimate in R channel
	COLOR = vec4(pressureEstimate, 0.0, 0.0, 1.0);
}"
