[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D divergence; // Divergence of the intermediate velocity

void fragment(){
	// Constants for the Jacobi calculation (taken from Nvidia paper)
	float alpha = -1.0;
	float rbeta = 0.25;
	
	// Use SCREEN_UV this time because we want to use the buffer.
	vec2 pos = SCREEN_UV;
	
	vec2 dxdy = SCREEN_PIXEL_SIZE;
	
	// Still want to sample over the entire divergence field, so UV here???
	float div = texture(divergence, UV).x * 2.0 - 1.0;
	
	// Grab surrounding points
	float left = texture(SCREEN_TEXTURE, vec2(pos.x - dxdy.x, pos.y)).x * 2.0 - 1.0;
	float right = texture(SCREEN_TEXTURE, vec2(pos.x + dxdy.x, pos.y)).x * 2.0 - 1.0;
	float bottom = texture(SCREEN_TEXTURE, vec2(pos.x, pos.y - dxdy.y)).x * 2.0 - 1.0;
	float top = texture(SCREEN_TEXTURE, vec2(pos.x, pos.y + dxdy.y)).x * 2.0 - 1.0;
	
	// Compute single Jacobi iteration
	float pressureEstimate = (left + right + bottom + top + (alpha * div)) * rbeta;
	
	// Return pressure estimate in R channel
	COLOR = vec4(pressureEstimate * 0.5 + 0.5, 0.0, 0.0, 1.0);
}"
