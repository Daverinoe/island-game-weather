[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

// Here we want to correct the intermediate velocity based on our estimated pressure

uniform sampler2D pressure;
uniform sampler2D velocity; // Intermediate velocity

void fragment(){
	vec2 pos = UV;
	vec2 dxdy = SCREEN_PIXEL_SIZE;
	
	// Calculate the pressure gradient
	float left = texture(pressure, vec2(pos.x - dxdy.x, pos.y)).x;
	float right = texture(pressure, vec2(pos.x + dxdy.x, pos.y)).x;
	float bottom = texture(pressure, vec2(pos.x, pos.y - dxdy.y)).x;
	float top = texture(pressure, vec2(pos.x, pos.y + dxdy.y)).x;
	
	vec2 gradient = (vec2(right, top) - vec2(left, bottom)) * 0.5;
	
	vec2 oldVelocity = texture(velocity, pos).xy;
	
	vec2 newVelocity = oldVelocity - gradient;
	
	// Output result into R and G channels
	COLOR = vec4(newVelocity, 0.0, 1.0);
}
"
